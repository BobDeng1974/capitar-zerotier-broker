{
	# Worker configuration.

	# This file is JSON, except that lines beginning with '#' are
	# removed before sending the file to the parser.  Thus, the rest
	# of the file must be valid JSON.

	# The controllers is an array of controllers that can be managed
	# by this worker.  Note that normally you need to use a localhost
	# or HTTPS configuration to ensure that connection to the worker
	# is properly secured.
	# Type can be either "controller" or "central".  If type is
	# omitted, then "controller" is assumed.
	"controllers": [
		{
			"address": "http://localhost:9993",
			"secret": "<put your local secret here>",
			"name": "personal",
			"nodeid": "2d2f619ccc",
			"type": "controller"
		},
		{
			"address": "https://my.zerotier.com",
			"secret":  "<put your API token here>",
			"name": "zerotier",
			"type": "central"
		}
	],

	# Proxies is an array of proxies that the controller will connect
	# to.  Each element has a survey member, which is the NNG ZeroTier
	# URL to use to register with (the value established by the proxy),
	# and the "reqrep" value is the local server address on the same
	# network.  The * character can be used for the nodeid and port
	# number in the reqrep piece, in which case the local node id and
	# an ephemeral port will be used.
	"proxies": [
		{
			"survey": "zt://964474c234.a09acf02337b057b:9992",
			"reqrep": "zt://*.a09acf02337b057b:*",

			# roles are applied to a proxy, and add to
			# the roles that a user has.
			"roles": [ "devnet" ],
			"xroles": {
				"allow": [ "dev" ],
				"deny": [ "xxx" ],
				"add": [ "devnet" ],
				"not": [ "admin" ]
			},
			"xxroles": [ "+devnet", "-alpha" ],
			"workers": 4
		},
		{
			"survey" "zt://964474c235.a09acf02337b057b:9992",
			"reqrep": "zt://*.a09acf02337b057b:*",
			"roles": [ "prodnet" ],
			workers: 4
		}
	],

	# networks, if defined, is an array of network IDs to expose or hide.
	# Each element is a string, prefixed by either "+" or "-".  A "+"
	# means that the network will be shown, and a - means that the network
	# will not be shown.  If no prefix is given, it means "+".  The
	# network will be matched against every element until a match is found.
	# If this element is empty, or missing, then a default of +all is
	# assumed.  If no match is found, then the default permission is deny.
	# Note that unless a +all entry is present, creating new
	# networks will not be permitted.
	# Example: To deny all networks except one: [ "1234567890abcdef" ] or
	# [ "1234567890abcdef", "-all" ]
	# To deny deny *only* one network: [ "+all", "-1234567890abcdef" ]
	#"networks": [
	#	"+all"
	#],

	# named roles. These are user definable, but
	# determine what can do what.  Name them whatever you want.
	# Roles can be assigned to either users or proxies.  (Users
	# coming in over a proxy add any roles for that proxy, so it's
	# additive.)  There is no way to *remove* privileges from a
	# a user based on which proxy was used.
	"roles": [
		"admin",
		"guest",
		"devnet",
		"prodnet"
	],
	"networks" : {
		"all": {
			"allow": [ "admin" ],
			"deny":  [ "guest"],
		},
		"1234567890abcdef": {
			"allow": [ "dev" ],
			"deny": [ "ops" ],
		}
	},
	"api" : {
		"get-status" : {
			"allow": [ "*" ],
			"deny": []
		},
		"get-network-members": {
			"allow": [ "*" ],
			"deny": [ ]
		},
		"authorize-network-member": {
			"allow": [ "admin" ],
			"deny": [ "ops" ],
		},
		"authorize-network-member": {
			"roles": [ "+<role>", "-<role>" ]
		}
	}
	# TLS configuration.  You can configure a keyfile, which will
	# also contain the certificate for the client, if the remote
	# server is configured to use HTTP client authentication.
	# Normally this is not used.  The cacert contains PEM encoded
	# certificates that can be used to validate the workers (or
	# central.)
	"tls": {
		#"keyfile": "/usr/local/ztc-worker/http.key",
		"cacert": "/usr/local/ztc-worker/rootca.crt"
	},

	# userdir contains users, each with username and
	# password, plus other stuff
	"userdir": "/var/ztc-worker/userdir",

	# tokendir contains files, each is a token name
	"tokendir": "/var/ztc-worker/tokens",

	"roles": [
		"admin", "guest"
	],

	# zthome is a home directory for storing ZeroTier identity information.
	# It must not be used by any other ZeroTier processes, and should
	# be protected from others.  You can leave this out to use ephemeral
	# ZeroTier identities, which works well for the worker, but may
	# frustate attempts to control security via filtering rules
	"zthome": "/var/ztc-worker/ztc-home"
}
