{
	# Worker configuration.
	#
	# This file is JSON, except that lines beginning with '#' are
	# removed before sending the file to the parser.  Thus, the rest
	# of the file must be valid JSON, with the exception that empty
	# lines without a '#' lead to a JSON parse error.
	#
	# The controllers is an array of controllers that can be managed
	# by this worker.  Note that normally you need to use a localhost
	# or HTTPS configuration to ensure that connection to the worker
	# is properly secured.
	# Type can be either "controller" or "central".  If type is
	# omitted, then "controller" is assumed.
	#
	"controllers": [
		{
			"address": "http://localhost:9993",
			# See /var/lib/zerotier-one/authtoken.secret
			"secret": "<put your local secret here>",
			"name": "personal",
			"nodeid": "4046ba1aac",
			"type": "zt1"
		},
		{
			"address": "https://my.zerotier.com",
			"secret": "<put your API token here>",
			"name": "zerotier",
			"type": "ztcentral"
		},
		# Note: Beta as of this moment does not work, because
		# they do not send a Content-Length header.  Hopefully
		# the ZeroTier team will fix that.
		{
			"address": "https://my-beta.zerotier.com",
			"secret": "<put your API token here>",
			"name": "my-beta-zerotier",
			"type": "ztcentral"
		}
	],
	#
	# named roles. These are user definable, but
	# determine what can do what.  User defined roles
	# must begin with an alphanumeric or underscore, and
	# may only consist of printable ASCII characters.
	#
	# There are a few special predefined system roles:
	#
	# %admin - this role has unlimited super powers, use with caution.
	# %token - this indicates that the user authenticated with API token
	# %all - every has this role implictly.
	#
	# Predefined cannot be listed here, but can be referenced elsewhere.
	# Note that users cannot explicitly create tokens with %token,
	# %all, or with roles that the acquired via the proxy they
	# authenticated over.
	"roles": [
		"guest",
		"dev",
		"devnet",
		"ops",
		"prodnet"
	],
	# Role groups.  These are ways to collect roles together into a
	# a collected group. The reason this is an array is so that
	# later entries can include earlier ones, without having to
	# cope with handing for cyles.
	"rolegroups": [
		{
			"name": "friends",
			"roles": [ "dev", "%admin" ]
		},
		{
			"name": "enemies",
			"roles":  [ "ops" ]
		},
		{
			"name": "staff",
			"roles" : [ "dev", "ops" ]
		},
		{
			"name": "everyone",
			"roles": [ "staff", "guest" ]
		}
	],
	# Proxies is an array of proxies that the controller will connect
	# to.  Each element has a survey member, which is the NNG ZeroTier
	# URL to use to register with (the value established by the proxy),
	# and the "reqrep" value is the local server address on the same
	# network.  The * character can be used for the nodeid and port
	# number in the reqrep piece, in which case the local node id and
	# an ephemeral port will be used.
	"proxies": [
		{
			"survey": "zt://964474c234.af3ef32436cbb581:9992",
			"reqrep": "zt://*.af3ef32436cbb581:9990",
			# rolemode changes the roles an authenticated
			# user has.  Roles can be added with "add", and
			# removed with "del".  Roles added this way
			# do not apply to created tokens, but roles
			# removed *do* affect created tokens.
			"rolemod": {
				"add": [ "devnet" ],
				"del": [ "%admin" ]
			},
			"workers": 4
		}
	],
	"network" : {
		"*": {
			"allow": [ "ops" ],
			"deny":  [ "%all" ]
		},
		"1234567890abcdef": {
			"allow": [ "ops" ],
			"deny": [ "dev", "%all" ]
		}
	},
	"api" : {
		"get-status" : {
			"allow": [ "%all" ],
			"deny": []
		},
		"get-networks": {
			"allow": [ "ops", "devnet" ],
			"deny": []
		},
		"get-network-members": {
			"allow": [ "ops", "devnet" ],
			"deny": [ "%all" ]
		},
		"authorize-network-member": {
			# %admin is implicitly in allow
			"allow": [ ],
			"deny": [ "devnet" ]
		}
	},
	#
	# TLS configuration.  You can configure a keyfile, which will
	# also contain the certificate for the client, if the remote
	# server is configured to use HTTP client authentication.
	# Normally this is not used.  The cacert contains PEM encoded
	# certificates that can be used to validate the workers (or
	# central.)
	#
	"tls": {
	#	"keyfile": "/usr/local/ztc-worker/http.key",
		"cacert": "/opt/ztc/worker/rootca.crt"
	},
	#
	# userdir contains users, each with username and
	# password, plus other stuff
	"userdir": "/opt/ztc/worker/users",
	#
	# tokendir contains files, each is a token name
	"tokendir": "/opt/ztc/worker/tokens",
	#
	# zthome is a home directory for storing ZeroTier identity information.
	# It must not be used by any other ZeroTier processes, and should
	# be protected from others.  You can leave this out to use ephemeral
	# ZeroTier identities, which works well for the worker, but may
	# frustate attempts to control security via filtering rules
	"zthome": "/opt/ztc/worker/zthome",
	"moons": [
		{
			"moonid": "622514484a",
			"nodeid": "622514484a"
		}
	]
}
