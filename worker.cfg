{
	# Worker configuration.

	# The controllers is an array of controllers that can be managed
	# by this worker.  Note that normally you need to use a localhost
	# or HTTPS configuration to ensure that connection to the worker
	# is properly secured.
	# Type can be either "controller" or "central".  If type is
	# omitted, then "controller" is assumed.
	"controllers": [
		{
			"address": "http://localhost:9993",
			"secret": "han-shot-first",
			"name": "staysail",
			"nodeid": "2d2f619ccc",
			"type": "controller"
		},
		{
			"address": "https://my.zerotier.com",
			"secret":  "<put your API token here>",
			"name": "zerotier",
			"type": "central"
		}
	],

	# Proxies is an array of proxies that the controller will connect
	# to.  Each element has a survey member, which is the NNG ZeroTier
	# URL to use to register with (the value established by the proxy),
	# and the "reqrep" value is the local server address on the same
	# network.  The * character can be used for the nodeid and port
	# number in the reqrep piece, in which case the local node id and
	# an ephemeral port will be used.
	"proxies": [
		{
			"survey": "zt://964474c234.a09acf02337b057b:9992",
			"reqrep": "zt://*.a09acf02337b057b:*"
		},
		{
			"survey" "zt://964474c235.a09acf02337b057b:9992",
			"reqrep": "zt://*.a09acf02337b057b:*"
		}
	],

	# networks, if defined, is an array of network IDs to expose or hide.
	# Each element is a string, prefixed by either "+" or "-".  A "+"
	# means that the network will be shown, and a - means that the network
	# will not be shown.  If no prefix is given, it means "+".  The
	# network will be matched against every element until a match is found.
	# If this element is empty, or missing, then a default of +all is
	# assumed.  If no match is found, then the default permission is deny.
	# Note that unless a +all entry is present, creating new
	# networks will not be permitted.
	# Example: To deny all networks except one: [ "1234567890abcdef" ] or
	# [ "1234567890abcdef", "-all" ]
	# To deny deny *only* one network: [ "+all", "-1234567890abcdef" ]
	"networks": [
		"+all"
	],
	"roles": [
		"admin",
		"guest",
		"ops",
	]
	"networks" : {
		"all": {
			"allow": [ "admin" ],
			"deny":  [ "guest"],
		},
		"1234567890abcdef": {
			"allow": [ "dev" ],
			"deny": [ "ops" ],
		}
	}
	# TLS configuration.  You can configure a keyfile, which will
	# also contain the certificate for the client, if the remote
	# server is configured to use HTTP client authentication.
	# Normally this is not used.  The cacert contains PEM encoded
	# certificates that can be used to validate the workers (or
	# central.)
	"tls": {
		#"keyfile": "/usr/local/ztc-worker/http.key",
		"cacert": "/usr/local/ztc-worker/rootca.crt"
	},

	# userdir contains users, each with username and
	# password, plus other stuff
	"userdb": "/var/ztc-worker/userdb",

	# tokendir contains files, each is a token name
	"tokendb": "/var/ztc-worker/tokendb",

	# named roles. These are user definable, but
	# determine what can do what.
	#
	# permissons are TBD.
	"roles": [],

	# zthome is a home directory for storing ZeroTier identity information.
	# It must not be used by any other ZeroTier processes, and should
	# be protected from others.  You can leave this out to use ephemeral
	# ZeroTier identities, which works well.
	"zthome": "/tmp/ztc-worker",
	# workers is used to configure the level of parallelism supported.
	# Consider each of these as supporting one remote client application.
	"workers": 4
}
